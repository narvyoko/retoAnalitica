import pandas as pd
# Mostrar los números sin notación científica ni separadores de miles
pd.set_option("display.float_format", "{:.4f}".format)  # 4 decimales, sin puntos extra
pd.set_option("display.max_columns", None)  # muestra todas las columnas
pd.set_option("display.max_rows", None)     # muestra todas las filas
import matplotlib.pyplot as plt
import seaborn as sns

#leer csv con los datos
df = pd.read_csv("escenario_tiendas_15.csv", encoding= "utf-8-sig")

print("Forma(filas, columnas):", df.shape) #verificar forma, cantidad de filas y columnas
print("\nTipos de datos:\n", df.dtypes) #verificar tipos de datos

#ve lo que falta (NaN, not a number) por columna
print("\nValores faltantes por columna:\n", df.isna().sum())

#el describe nos da conteo, media, std, min, cuartiles y max para variables numericas
desc = df.select_dtypes("number").describe()
print("\nDescripcion numerica:\n", desc)

#algo
var1 = "Ventas_Mensuales"
var2 = "Precio_Promedio"

#Media (promedio)
media_var1 = df[var1].mean(skipna=True)
media_var2 = df[var2].mean(skipna=True)

#mediana
mediana_var1 = df[var1].median(skipna=True)
mediana_var2 = df[var2].median(skipna=True)

#moda y si hay varias usamos la primera
moda_var1 = df[var1].mode(dropna=True)
moda_var2 = df[var2].mode(dropna=True)
moda_var1 = moda_var1.iloc[0] if not moda_var1.empty else None
moda_var2 = moda_var2.iloc[0] if not moda_var2.empty else None

print("\n=== Indicadores de tendencia central ===")
print(f"{var1} -> media: {media_var1:.2f}, mediana: {mediana_var1:.2f}, moda: {moda_var1}")
print(f"{var2} -> media: {media_var2:.2f}, mediana: {mediana_var2:.2f}, moda: {moda_var2}")


# -------------------------------------------------------------
# 4) Gráficos simples
# -------------------------------------------------------------
# 4.1) Boxplot (caja y bigotes) de Ventas_Mensuales
# Útil para ver distribución, mediana y posibles outliers
plt.figure()
df[var1].plot(kind="box", title=f"Boxplot - {var1}")
plt.tight_layout()
plt.show()

# 4.2) Histograma de Ventas_Mensuales
# Útil para ver la forma de la distribución y los rangos más frecuentes
plt.figure()
df[var1].plot(kind="hist", bins=10, title=f"Histograma - {var1}")
plt.xlabel("Valor")
plt.ylabel("Frecuencia")
plt.tight_layout()
plt.show()
# 4.3) Boxplot adicional para otra variable (Precio_Promedio)
# Esto cumple con el pedido de un boxplot extra para otra variable
plt.figure()
df[var2].plot(kind="box", title=f"Boxplot - {var2}")
plt.tight_layout()
plt.show()
# -------------------------------------------------------------
# 5) Matriz de correlación y heatmap
# -------------------------------------------------------------
# Calculamos la matriz de correlaciones solo con columnas numéricas
num = df.select_dtypes("number")
corr = num.corr(numeric_only=True)
print("\nMatriz de correlación:\n", corr)
# Heatmap para visualizar de forma gráfica las correlaciones
plt.figure(figsize=(12,8))
sns.heatmap(corr, annot=True, fmt=".2f", square=True, annot_kws={"size":10})
plt.title("Heatmap de correlaciones (variables numéricas)")
plt.tight_layout()
plt.show()
# -------------------------------------------------------------
# 6) Correlaciones más fuertes con la variable objetivo
# -------------------------------------------------------------
if var1 in corr.columns:
    top_corr = corr[var1].dropna().abs().sort_values(ascending=False).head(6)
    print(f"\nCorrelaciones más fuertes (absolutas) con {var1}:\n", top_corr)
print("\nListo.")
print("Imágenes guardadas:")
print(" - boxplot_ventas.png")
print(" - hist_ventas.png")
print(" - boxplot_precio_promedio.png")
print(" - heatmap_correlaciones.png")
